#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <28 29>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&trans  &trans             &trans           &trans             &trans     &trans                                  &trans       &trans  &trans     &trans    &trans              &trans
&trans  &kp Q              &kp W            &kp E              &kp R      &kp T                                   &kp Y        &kp U   &kp I      &kp O     &kp P               &trans
&trans  &kp A              &kp S            &kp D              &kp F      &kp G            &trans     &trans      &kp H        &kp J   &kp K      &kp L     &kp MINUS           &trans
&trans  &kp Z              &kp X            &kp C              &kp V      &kp B            &mkp LCLK  &mkp RCLK   &kp N        &kp M   &kp COMMA  &kp DOT   &mt RIGHT_ALT FSLH  &trans
&trans  &mt LSHIFT ESCAPE  &mt LALT DELETE  &mt LEFT_WIN CAPS  &lt 3 TAB  &lt 1 BACKSPACE  &kp LCTRL  &kp RSHIFT  &lt 2 SPACE  &trans  &trans     &kp RALT  &mt RCTRL ENTER     &trans
            >;
        };

        layer_1 {
            bindings = <
&trans  &trans     &trans          &trans          &trans           &trans                                          &trans           &trans           &trans           &trans           &trans        &trans
&trans  &kp TILDE  &kp HOME        &kp UP_ARROW    &kp END          &mkp MCLK                                       &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans        &trans
&trans  &kp CAPS   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &mkp LCLK  &trans  &trans                       &kp KP_DIVIDE    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS  &trans
&trans  &kp LC(Z)  &kp LC(X)       &kp LC(C)       &kp LC(V)        &mkp RCLK  &trans  &trans                       &kp KP_ASTERISK  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_PLUS   &trans
&trans  &trans     &trans          &trans          &kp KP_NUMLOCK   &trans     &trans  &mt RIGHT_SHIFT KP_NUMBER_0  &kp KP_COMMA     &trans           &trans           &trans           &trans        &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans            &trans            &trans      &trans      &trans                                  &trans          &trans         &trans            &trans             &trans         &trans
&trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)                              &kp LS(N6)      &kp LS(N7)     &kp LS(N8)        &kp LS(N9)         &kp LS(N0)     &trans
&trans  &kp N1            &kp N2            &kp N3      &kp N4      &kp N5      &trans              &trans  &kp LEFT_BRACE  &kp MINUS      &kp EQUAL         &kp RIGHT_BRACE    &kp COLON      &trans
&trans  &kp N6            &kp N7            &kp N8      &kp N9      &kp N0      &trans              &trans  &kp LS(MINUS)   &kp LS(EQUAL)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH  &trans
&trans  &trans            &trans            &trans      &trans      &trans      &kp LC(LA(DELETE))  &trans  &trans          &trans         &trans            &trans             &trans         &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans   &trans   &trans        &trans        &trans                      &trans            &trans     &trans         &trans     &trans      &trans
&trans  &kp F1   &kp F2   &kp F3        &kp F4        &kp F5                      &kp HOME          &kp PG_UP  &kp PAGE_DOWN  &kp END    &kp ESCAPE  &trans
&trans  &kp F6   &kp F7   &kp F8        &kp F9        &kp F10     &trans  &trans  &kp LEFT          &kp DOWN   &kp UP_ARROW   &kp RIGHT  &kp TAB     &trans
&trans  &kp F11  &kp F12  &out OUT_USB  &out OUT_BLE  &bt BT_NXT  &trans  &trans  &kp SINGLE_QUOTE  &kp DQT    &kp GRAVE      &kp TILDE  &kp PIPE    &trans
&trans  &trans   &trans   &trans        &kp DELETE    &kp TAB     &trans  &trans  &trans            &trans     &trans         &trans     &trans      &trans
            >;
        };
    };
};
