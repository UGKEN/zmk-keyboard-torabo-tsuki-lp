#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

/ {
    combos {
        compatible = "zmk,combos";

        bt_clear {
            bindings = <&bt BT_CLR>
            key-positions = <28 29>;
            layers = <2>;
        };
    };

    trackball_listener {
                input-processors = <&zip_xy_scaler 1 5>;
                input-processors = <&zip_scroll_scaler 1 5>;                input-processors = <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>;

        scroller {
            layers = <2>;
            layers = <6>;
            input-processors = <&zip_xy_to_scroll_mapper>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&trans  &trans             &trans           &trans             &trans     &trans                                  &trans       &trans  &trans     &trans    &trans              &trans
&trans  &kp Q              &kp W            &kp E              &kp R      &kp T                                   &kp Y        &kp U   &kp I      &kp O     &kp P               &trans
&trans  &kp A              &kp S            &kp D              &kp F      &kp G            &trans     &trans      &kp H        &kp J   &kp K      &kp L     &kp MINUS           &trans
&trans  &kp Z              &kp X            &kp C              &kp V      &kp B            &mkp LCLK  &mkp RCLK   &kp N        &kp M   &kp COMMA  &kp DOT   &mt RIGHT_ALT FSLH  &trans
&trans  &mt LSHIFT ESCAPE  &mt LALT DELETE  &mt LEFT_WIN CAPS  &lt 3 TAB  &lt 1 BACKSPACE  &kp LCTRL  &kp RSHIFT  &lt 2 SPACE  &trans  &trans     &kp RALT  &mt RCTRL ENTER     &trans
            >;
        };

        layer_1 {
            bindings = <
&trans  &trans         &trans          &trans          &trans           &trans                                          &trans           &trans           &trans           &trans           &trans                 &trans
&trans  &kp JP_HANZEN  &kp HOME        &kp UP_ARROW    &kp END          &mkp MCLK                                       &kp JP_TILDE     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp JP_UNDERSCORE      &trans
&trans  &mo 2          &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &mkp LCLK  &trans  &trans                       &kp KP_DIVIDE    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS           &trans
&trans  &kp LC(Z)      &kp LC(X)       &kp LC(C)       &kp LC(V)        &mkp RCLK  &trans  &trans                       &kp KP_ASTERISK  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &mt RIGHT_ALT KP_PLUS  &trans
&trans  &trans         &trans          &trans          &kp KP_NUMLOCK   &trans     &trans  &mt RIGHT_SHIFT KP_NUMBER_0  &kp KP_COMMA     &trans           &trans           &trans           &trans                 &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans            &trans            &trans        &trans               &trans                               &trans    &trans    &trans    &trans    &trans              &trans
&trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(N3)    &kp LS(N4)           &kp LS(N5)                           &kp F1    &kp F2    &kp F3    &kp F4    &kp F5              &trans
&trans  &kp LS(N6)        &kp LS(N7)        &kp LS(N8)    &kp LS(N9)           &kp LS(N0)           &trans  &trans  &kp F6    &kp F7    &kp F8    &kp F9    &kp F10             &trans
&trans  &kp JP_YEN        &kp JP_PIPE       &kp JP_CARET  &kp INTERNATIONAL_5  &kp INTERNATIONAL_4  &trans  &trans  &kp LBKT  &kp SEMI  &kp APOS  &kp RBKT  &mt RIGHT_ALT BSLH  &trans
&trans  &trans            &trans            &trans        &trans               &trans               &trans  &trans  &trans    &trans    &trans    &trans    &to 3               &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans        &trans           &trans        &trans        &trans                                    &trans        &trans           &trans     &trans       &trans         &trans
&trans  &kp N1        &kp N2           &kp N3        &kp N4        &kp N5                                    &trans        &trans           &kp LC(R)  &trans       &trans         &trans
&trans  &kp N6        &kp N7           &kp N8        &kp N9        &kp N0        &trans              &trans  &kp LA(LEFT)  &mkp LCLK        &mkp MCLK  &mkp RCLK    &kp LA(RIGHT)  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &out OUT_TOG  &to 0               &to 4   &trans        &kp LS(LC(TAB))  &kp LC(W)  &kp LC(TAB)  &trans         &trans
&trans  &trans        &kp LA(LC(END))  &bt BT_CLR    &trans        &to 0         &kp LA(LC(DELETE))  &trans  &trans        &trans           &trans     &trans       &trans         &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans             &trans            &trans        &trans     &trans                                     &trans       &trans  &trans     &trans     &trans               &trans
&trans  &kp Q              &kp W             &kp E         &kp R      &kp T                                      &kp Y        &kp U   &kp I      &kp O      &kp P                &trans
&trans  &kp A              &kp S             &kp D         &kp F      &kp G            &trans        &trans      &kp H        &kp J   &kp K      &kp L      &kp MINUS            &trans
&trans  &kp Z              &kp X             &kp C         &kp V      &kp B            &mkp LCLK     &mkp RCLK   &kp N        &kp M   &kp COMMA  &kp DOT    &mt RIGHT_ALT FSLH   &trans
&trans  &mt LSHIFT ESCAPE  &mt LCTRL DELETE  &mt TAB CAPS  &lt 7 TAB  &lt 5 BACKSPACE  &kp LEFT_WIN  &kp RSHIFT  &lt 6 SPACE  &trans  &trans     &kp RCTRL  &mt RIGHT_WIN ENTER  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans         &trans              &trans          &trans           &trans                                          &trans           &trans           &trans           &trans           &trans                 &trans
&trans  &kp LC(SPACE)  &kp LC(LEFT_ARROW)  &kp UP_ARROW    &kp LC(RIGHT)    &mkp MCLK                                       &kp TILDE        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(MINUS)          &trans
&trans  &mo 6          &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW  &mkp LCLK  &trans  &trans                       &kp KP_DIVIDE    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS           &trans
&trans  &kp LG(Z)      &kp LG(X)           &kp LG(C)       &kp LG(V)        &mkp RCLK  &trans  &trans                       &kp KP_ASTERISK  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &mt RIGHT_ALT KP_PLUS  &trans
&trans  &trans         &trans              &trans          &kp KP_NUMLOCK   &trans     &trans  &mt RIGHT_SHIFT KP_NUMBER_0  &kp KP_COMMA     &trans           &trans           &trans           &trans                 &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans            &trans             &trans            &trans             &trans                         &trans      &trans    &trans             &trans            &trans                       &trans
&trans  &kp LS(NUMBER_1)  &kp DOUBLE_QUOTES  &kp LS(N3)        &kp LS(N4)         &kp LS(N5)                     &kp F1      &kp F2    &kp F3             &kp F4            &kp F5                       &trans
&trans  &kp LS(N7)        &kp SINGLE_QUOTE   &kp LS(N9)        &kp LS(N0)         &kp EQUAL      &trans  &trans  &kp F6      &kp F7    &kp F8             &kp F9            &kp F10                      &trans
&trans  &kp BACKSLASH     &kp LS(BACKSLASH)  &kp LS(NUMBER_6)  &kp LC(LS(SPACE))  &kp LC(SPACE)  &trans  &trans  &kp LS(N2)  &kp SEMI  &kp LS(SEMICOLON)  &kp LEFT_BRACKET  &mt RIGHT_ALT RIGHT_BRACKET  &trans
&trans  &trans            &trans             &trans            &trans             &trans         &trans  &trans  &trans      &trans    &trans             &trans            &to 7                        &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans                           &trans              &trans           &trans     &trans       &trans         &trans
&trans  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5                           &trans              &trans           &kp LC(R)  &trans       &trans         &trans
&trans  &kp N6        &kp N7        &kp N8        &kp N9        &kp N0        &trans     &trans  &kp LA(LEFT_ARROW)  &mkp LCLK        &mkp MCLK  &mkp RCLK    &kp LA(RIGHT)  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &out OUT_TOG  &to 0      &to 4   &trans              &kp LS(LC(TAB))  &kp LC(W)  &kp LC(TAB)  &trans         &trans
&trans  &trans        &kp LG(N)     &bt BT_CLR    &trans        &to 4         &kp LG(C)  &trans  &trans              &trans           &trans     &trans       &trans         &trans
            >;
        };
    };
};
